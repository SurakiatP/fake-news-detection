{"duration": 0.01589179039001465, "input_args": {"text": "'Remy Porter Remy escaped the enterprise world and now works as a consultant. Editor-in-Chief for TDWTF. \\nUnit tests are a wonderful tool for proving that your code works. Ideally, when you\u2019re using other code, like say, the .NET Framework, you don\u2019t write tests that test the framework itself. After all, didn\u2019t Microsoft already do that? \\nDavid T \u2019s co-worker laughs at your na\u00efvet\u00e9 . Why would you trust Microsoft ? You need to make sure the framework works as advertised. Which is why their unit tests are mostly made up of code like this: [Test] public void It_Converts_DataType_Text_Into_ConcreteType() { const string dataTypeText = \"System.DateTime\"; var dataType = Type.GetType(dataTypeText); Assert.IsTrue(dataType == typeof(DateTime)); } [Test] public void It_Converts_String_Into_Given_DataType() { const string data = \"10-10-2014\"; const string dataTypeText = \"System.DateTime\"; var dataType = Type.GetType(dataTypeText); object newData = Convert.ChangeType(data, dataType); Assert.That(newData, Is.TypeOf<DateTime>()); } \\nNow, if the .NET Framework\u2019s ability to load and recognize types ever breaks, David\u2019s team will be the first to know. [Advertisement] Application Release Automation \u2013 build complex release pipelines all managed from one central dashboard, accessibility for the whole team. Download and learn more today!'"}, "time": 1742563011.9744558}