{"duration": 0.09829068183898926, "input_args": {"text": "'Remy Porter Remy escaped the enterprise world and now works as a consultant. Editor-in-Chief for TDWTF. \\n\u201cYou\u2019re going to learn quite a bit from Burt,\u201d Burt said. \u201cHe\u2019s one of the best.\u201d \\nDavide blinked. He wondered if his new boss spoke about himself in the third person as a matter of course. Cautiously, he said, \u201cWell\u2026 I hope so?\u201d \\n\u201cBurt\u2019s been with us since the beginning,\u201d Burt continued. \u201cNobody but nobody knows our systems and our environment better than he does. He\u2019s one of those\u2026 whatchacallits \u2026\u201d Burt glanced around his desk, and found what he was looking for- a glossy trade-mag with a cover story about the most productive developers. \u201cA Ten-X developer. We\u2019re really lucky to have him, and you\u2019re really lucky to work with him.\u201d \\nBurt was not speaking in the third person. Burt, the CTO of the company, was a huge fan of Burt, the lead developer at the company. When Davide was hired on, CTO-Burt spent a lot of time praising the genius of Dev-Burt. Once David started working, he didn\u2019t see CTO-Burt very much, but Dev-Burt also was eager to talk about what a genius he was. \\n\u201cNot just anybody can manage a system with 100KLOC, mostly by themselves,\u201d Dev-Burt said. \u201cBut stick with me, and maybe you\u2019ll learn.\u201d \\nDev-Burt\u2019s genius was questionable. Five minutes skimming the code-base made it clear that Dev-Burt had the coding conventions of a drunken lemur. The only thing that made the code even slightly readable was that most of it was in Python, and thus had to be indented logically. That was the only logical thing about it. Some variables were named in camelCase , others in snake_case . Half of them were just alwayslowercase . Function names were generally more consistent, only because there were fewer of them: Dev-Burt was the kind of developer that just loved to write 5,000 line functions. There were plenty of global variables, plenty of spaghettified code, and plenty \u201cgod\u201d objects that mashed together thirty unrelated behaviors into one mess that behaved differently depending on which specific flags you set. \\nDev-Burt was too busy being a 10x developer to give Davide any guidance about what he was supposed to do. The only coding conventions appeared to be \u201cDev-Burt does whatever Dev-Burt wants.\u201d From time to time, Davide would pick up tickets as they came through, tracking down and patching bugs, but mostly he tried to find opportunities to refactor the code and add some unit tests. \\nThis radical behavior lead to a tense meeting with the Burts. \\n\u201cBurt tells me you\u2019re causing problems,\u201d CTO-Burt said. \\n\u201cHe\u2019s making a mess out of my code,\u201d Dev-Burt complained. \u201cHe\u2019s making it more complicated!\u201d \\n\u201cI was just refactoring it so-\u201d \\n\u201cThere he goes,\u201d Dev-Burt said, throwing a hand in the air, \u201cusing his made up buzzwords. Look, we\u2019ve got product to ship, and your refractioning isn\u2019t getting us anywhere. I wouldn\u2019t mind so much, but it\u2019s eating into my own time, and making it harder for me to get work done!\u201d \\n\u201cThat\u2019s bad,\u201d CTO-Burt timed in. \u201cBecause Burt\u2019s a Ten-X developer. His time\u2019s ten more times as valuable as yours.\u201d \\nAt least, after the meeting, Davide had clear rules to follow: Dev-Burt does whatever he wants, Davide does whatever Dev-Burt tells him to, and Davide was not to touch any code unless it was to deal with a ticket assigned to him by CTO-Burt. \\nThis gave Davide a lot of downtime, during which he could watch the codebase grow. It was true, Dev-Burt was a 10x developer, in the sense that he could write ten times as much code as necessary and he\u2019d often write the same code ten times, in different places in the application. \\nOne day, while wondering if this made Dev-Burt the first 100x developer, Davide received a new ticket. One of the automated jobs had failed, dumping a stack trace to the log, and it kept failing every hour. It didn\u2019t seem to be having any other effects, but CTO-Burt wanted it fixed. \\nDavide assumed there was an un-handled error, and dug through the stack trace to find the offending code. He was half right. Once he cut away the bulk of the logic, the basic structure of the method was this: def manage_expectations(*args,**kwargs): try: #about 1,200 lines of code except Exception, e: raise e \\nSo, Dev-Burt had handled the exception\u2026 by re-throwing it. A few hours picking apart the function, and it was clear that the underlying problem was a FileNotFoundError when scanning a logfile for messages- there was no guarantee that the logfile would exist. It was easy enough to make the code fail gracefully when it encountered the exception, but that might be considered \u201crefractioning\u201d, and so Davide needed to ask Dev-Burt for permission first. \\n\u201cHey, Burt,\u201d Davide asked, \u201ccan you pull up some code for me?\u201d He pointed to the raise e and said, \u201cWhy are you doing that? Why is that there?\u201d \\nDev-Burt nodded, stroking his chin thoughtfully. \u201cThat\u2019s an exception handler,\u201d he said. \\n\u201cYes, I know that . Why is that raise there?\u201d \\n\u201cHmm\u2026 I guess I\u2019m not sure. What does the raise command do?\u201d \\nDavide went back to his desk, fixed the exception handler, and then started sending out resumes. He\u2019d learned everything he needed to from Dev-Burt, and was now ready to fail gracefully out of this job. [Advertisement] Application Release Automation for DevOps \u2013 integrating with best of breed development tools. Free for teams with up to 5 users. Download and learn more today!'"}, "time": 1742561965.846837}