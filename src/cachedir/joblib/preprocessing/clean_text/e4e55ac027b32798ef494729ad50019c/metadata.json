{"duration": 0.1404712200164795, "input_args": {"text": "'Remy Porter Remy escaped the enterprise world and now works as a consultant. Editor-in-Chief for TDWTF. \\nWhen Nate was wrapping up his senior year of college, he hunted around for a job that would hire an undergrad on flexible hours. He knew that the kinds of companies that tended to hire on those terms could often have\u2026 creative practices, but college wasn\u2019t about to pay for itself. \\nHe found a small shop that needed an extra hand. Extremely small- there was only one other developer, Gordon. Nate was prepared to enter a tiny shop with no real practices or procedures, because with only one developer, you don\u2019t expect a lot of rules and bureaucracy. \\nGordon was only one person, but he was able to create enough contrived, arcane, and downright mysterious bureaucratic policies and procedures for fifty developers. Reading the style-guide was closer to reading a novel, but not a good novel where there was a clear point and narrative thread, but something meandering and pointless, like a Douglas Adams book. \\nGordon wasn\u2019t just opinionated about style . He also had Opinions\u2122 on the proper use of source control. \u201cBranches,\u201d Gordon explained, \u201care absolutely vital for separating units of work.\u201d \\nGordon\u2019s explanation came after Nate was stunned by the sheer number of branches- there were hundreds of branches in the repository. \u201cLook,\u201d Gordon said, \u201cyou don\u2019t have to be intimidated by this. We can start you out, just do this small change in the main branch, then I\u2019ll show you how to release it.\u201d \\nNate dutifully checked out master , made the change, and committed it. He sent Gordon a pull request. \\n\u201cYou used the wrong branch. Back out your change, and put it in the main one.\u201d \\n\u201cWhich branch is the main one? It\u2019s not master ?\u201d \\n\u201cIt used to be, but we don\u2019t really use master anymore. Use master_4513 .\u201d \\nAs it turned out, the \u201cmain branch\u201d was usually whichever branch Gordon touched last. There were five or six different branches that could be the \u201cmain\u201d branch at any given time. Maybe seven- it was very hard for Nate to be certain. \\nNate made the changes in master_4513 , but that was only the start of the nightmare. Now, those changes had to be merged into the correct branch for deployment. \u201cThis is pretty complex, do you want me to walk you through it?\u201d Gordon asked. \\nNate said yes, and so Gordon sat down next to him, and started explaining each step that Nate needed to perform. These \u201cexplanations\u201d started with Gordon pressing his fingers against Nate\u2019s monitor and saying, \u201cClick here.\u201d\u201cNo, fire up the GUI, not the CLI.\u201d\u201cSelect this branch.\u201d The instructional process was recorded as a smear of fingerprints on Nate\u2019s screen. \\nChanges merged outward from the main branch (whatever \u201cmain\u201d happened to be that day). Instead of merging back towards a known-good trunk of code, changes were made to the trunk, and then percolated outward, according to Gordon\u2019s own twisted logic. \u201cYou see,\u201d he explained, \u201cwe\u2019ve gotta maintain, like, 15 different versions, and some of them depend on a different version of our framework lib. This main version builds against version 1.2 of the framework.\u201d \\n\u201cBut\u2026 isn\u2019t your framework up to version 4.5? Like\u2026 for years now?\u201d \\n\u201cYeah, but this change only goes out to the 2.0 users, so you need to merge from main to master_51 , then to frameworkupgradeA1 , then to perky_peregrine . You\u2019ll need to resolve conflicts.\u201d \\nNate ground his teeth hard enough to make diamonds between them, and fought his way through the merge conflicts. A few hours later, Nate\u2019s one line change was merged into a releasable version, but Nate had no idea how that change would migrate to any other version, if it ever did. \\nNate\u2019s next assignment was to make a change to the same version, and since it was a larger change, he made a feature branch off of perky_peregrine , do the changes there, then merge right back into perky_peregrine after the work was done. Then he could propagate the changes back to the current \u201cmain\u201d branch, asdfg . This resulted in an angry visit from Gordon. \\n\u201cAre you trying to mess this up?\u201d Gordon demanded. \u201cThere is a system . There are policies ! Did you even read the development guide I gave you? Feature branches are fine, but they have to come off the main branch, not one of the dependent branches!\u201d \\nNate had tried valiantly to read it, but failed. \u201cI was just going to do the work, merge into perky_peregrine , and then delete the branch, why does it matter?\u201d \\n\u201cMerge back ?\u201d Gordon shrieked. \u201cDELETE the BRANCH? Branches don\u2019t merge backwards , only outwards. Like a tree. Each feature branch is supposed to be an entirely new line of development. Have you even used source control?\u201d \\nSomething snapped in the back of Nate\u2019s brain, because for a brief, terrifying moment, that almost made sense. Nate had been puzzling over the bizarre state of their source control repository, and those words from Gordon put understanding it within tantalizing reach. If he asked a few more questions, he might just see the method to this madness\u2026 \\nNate chose the wiser path. He smiled, he nodded, he complied with Gordon\u2019s policies, and moved on to the next feature, weeks after cutting through the shrubbery that was Gordon\u2019s branching system. \\nThe next feature was to make a change that only impacted users of the latest version of the base framework. The current \u201cmain\u201d branch was back on version 2.3, so Nate needed to start by making a branch from there. Then he had to bring it up to version 4.0, then convert a few of the datafiles into a new format, then finish the upgrade to 4.5. This was about two weeks of hair pulling frustration. Then he could make his changes. He spent that week asking serious questions about the career path he was on. Finally , he could merge his changes into the actual 4.5 release branch, but never back into any master branch. \\nThis resulted in tens of thousands of merge conflicts. The next few weeks were spent cutting through them, and by the end of that time, Nate discovered the semester was nearly over. He was about to graduate. He went to Lindsey, the co-owner of the small company, and handed in his resignation. \\n\u201cWe\u2019ve been really impressed by your work,\u201d she said. \u201cYou could stay on after college, if you like.\u201d \\nHer tone was even, perhaps even a little indifferent, but there was a plea in her eyes. Nate vaguely recalled hearing that Gordon was a friend of Reggie, the other co-owner. Nate saw a hint that Lindsay knew what Gordon was doing to their software product. Maybe she thought Nate could be her ally in fixing it. \\nOr maybe Nate was reading too much into it. Discretion was the better part of valor. \u201cI\u2019m sorry, I just don\u2019t think I\u2019m the right fit for this team,\u201d he said. They made the polite noises, she promised him a recommendation letter, they connected on LinkedIn, and Nate went off to find a source tree that didn\u2019t look like a tangled briar. \\nA few months after Nate settled into his new job, he snooped on Gordon\u2019s LinkedIn profile- he was unemployed. A message to Lindsay confirmed that she\u2019d fired him over his inability to deliver new features. The last anyone had heard, Gordon had retired to a cabin in the woods, where he could be alone with many branches that never merged back into their trunks. \\nEditors Note : We meant no harm in teasing Douglas Adams, but your reaction was much more interesting than it would have been to another tired Twilight joke. [Advertisement] Incrementally adopt DevOps best practices with BuildMaster , ProGet and Otter , creating a robust, secure, scalable, and reliable DevOps toolchain.'"}, "time": 1742562784.8916023}